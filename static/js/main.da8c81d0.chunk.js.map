{"version":3,"sources":["components/InputSection/InputSection.module.css","components/MovieList/Movie/Movie.module.css","components/InputSection/InputSection.js","components/MovieList/Movie/Movie.js","components/UI/Backdrop/Backdrop.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","divElement","infoElement","input","movieDiv","img","inputSection","props","react_default","a","createElement","className","classes","type","name","onChange","inputHandler","placeholder","h1","movie","state","movieTitle","_this","title","rating","release","movieClickHandler","fetch","concat","then","res","json","data","console","log","Rated","Released","setState","setTimeout","this","key","id","onClick","src","poster","alt","width","height","toUpperCase","year","Component","backdrop","style","active","zIndex","backgroundColor","App","movieSearch","event","value","target","undefined","Search","movieData","Backdrop","InputSection","map","Movie","imdbID","Title","Year","Type","Poster","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da8c81d0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"divElement\":\"InputSection_divElement__2Jy2v\",\"infoElement\":\"InputSection_infoElement__10ghY\",\"input\":\"InputSection_input__3YOeC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movieDiv\":\"Movie_movieDiv__21hkc\",\"img\":\"Movie_img__3P0yC\"};","import React from \"react\";\nimport classes from \"./InputSection.module.css\";\n\nconst inputSection = props => {\n  return (\n    <div className={classes.divElement}>\n      <input\n        className={classes.input}\n        type=\"text\"\n        name=\"input\"\n        onChange={props.inputHandler}\n        placeholder=\"Search your Favorite Movies and TV Shows\"\n      />\n      <div className={classes.infoElement}>\n        <h1 className={classes.h1}>Movie-DB</h1>\n        <h4>Powered by OMDb API</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default inputSection;\n","import React, { Component } from \"react\";\nimport classes from \"./Movie.module.css\";\n\nclass movie extends Component {\n  state = {\n    movieTitle: this.props.title,\n    rating: \"\",\n    release: \"\"\n  };\n\n  movieClickHandler = () => {\n    fetch(`https://www.omdbapi.com/?t=${this.state.movieTitle}&apikey=e2d95701`)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        const rating = data.Rated;\n        const release = data.Released;\n        this.setState({\n          rating: rating,\n          release: release\n        });\n      });\n  };\n\n  componentWillReceiveProps() {\n    setTimeout(this.setState({ movieTitle: this.props.title }), 1000);\n  }\n\n  //   const { title } = props;\n\n  //Need to fetch more information about each movie title and then store it.\n  //Try with useState Hooks for Functional Components\n  //   fetch(`https://www.omdbapi.com/?t=${title}&apikey=e2d95701`)\n  //     .then(res => res.json())\n  //     .then(data => {\n  //       const movieDetails = data;\n  //       console.log(movieDetails);\n  //     });\n  render() {\n    return (\n      <div\n        className={classes.movieDiv}\n        key={this.props.id}\n        onClick={this.movieClickHandler}\n      >\n        <img\n          className={classes.img}\n          src={this.props.poster}\n          alt={this.props.title}\n          width=\"240\"\n          height=\"360\"\n        />\n        <h2>{this.props.title}</h2>\n        <h3>{this.props.type.toUpperCase()}</h3>\n        <h3>{this.props.year}</h3>\n        <h3>{this.state.rating}</h3>\n      </div>\n    );\n  }\n}\n\nexport default movie;\n","import React from 'react'\n\nconst backdrop = (props) => {\n    let style = null\n    if (props.active) {\n        style = {\n            zIndex: 100,\n            backgroundColor: \"black\",\n        }\n    }\n    return (\n        <div style={style}>\n\n        </div>\n    )\n}\n\nexport default backdrop\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport InputSection from \"./components/InputSection/InputSection\";\n// import MovieList from \"./components/MovieList/MovieList\";\nimport Movie from \"./components/MovieList/Movie/Movie\";\nimport Backdrop from \"./components/UI/Backdrop/Backdrop\";\n\nclass App extends Component {\n  state = {\n    movieSearch: []\n  };\n\n  inputHandler = event => {\n    const { value } = event.target;\n\n    let inputText = value;\n\n    fetch(`https://www.omdbapi.com/?s=${inputText}&apikey=e2d95701`)\n      .then(res => res.json())\n      .then(data => {\n        if (data.Search === undefined) {\n          this.setState({ movieSearch: [] });\n        } else {\n          const movieData = data.Search;\n          this.setState({ movieSearch: movieData });\n        }\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Backdrop>\n          <InputSection inputHandler={this.inputHandler} />\n          <div className=\"movie\">\n            {this.state.movieSearch.map(movie => {\n              return (\n                <div>\n                  <Movie\n                    id={movie.imdbID}\n                    title={movie.Title}\n                    year={movie.Year}\n                    type={movie.Type}\n                    poster={movie.Poster}\n                    imdbID={movie.imdbID}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        </Backdrop>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}